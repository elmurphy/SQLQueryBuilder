/************************************************************************************************
 * *
 * LARGE DATASET Setup Script Generated by SQLQueryBuilder Assistant                        *
 * This script creates the specified schema and populates it with over 1000 rows of test data. *
 * The script is designed to be re-runnable.                                                  *
 * *
 ************************************************************************************************/

-- Suppress the "(1 row(s) affected)" message in the Messages tab for a cleaner output
SET NOCOUNT ON;

-- == STEP 1: DROP EXISTING TABLES (for Re-runnability) ==
PRINT 'STEP 1: Dropping existing tables (if they exist)...';
GO

-- Drop tables in reverse order of creation due to foreign key constraints
IF OBJECT_ID('dbo.OrderProducts', 'U') IS NOT NULL DROP TABLE dbo.OrderProducts;
IF OBJECT_ID('dbo.Orders', 'U') IS NOT NULL DROP TABLE dbo.Orders;
IF OBJECT_ID('dbo.Products', 'U') IS NOT NULL DROP TABLE dbo.Products;
IF OBJECT_ID('dbo.Categories', 'U') IS NOT NULL DROP TABLE dbo.Categories;
IF OBJECT_ID('dbo.UserProfiles', 'U') IS NOT NULL DROP TABLE dbo.UserProfiles;
IF OBJECT_ID('dbo.Users', 'U') IS NOT NULL DROP TABLE dbo.Users;
GO
PRINT '--> Table cleanup complete.';
PRINT '------------------------------------------------';


-- == STEP 2: CREATE TABLES ==
PRINT 'STEP 2: Creating tables...';
GO

-- Users Table
CREATE TABLE Users (
    Id INT PRIMARY KEY IDENTITY(1,1), CreatedOn DATETIME2 NOT NULL DEFAULT GETUTCDATE(), CreatedBy INT NULL, UpdatedOn DATETIME2 NULL, UpdatedBy INT NULL, IsActive BIT NOT NULL DEFAULT 1, IsDeleted BIT NOT NULL DEFAULT 0,
    Username NVARCHAR(50) NOT NULL UNIQUE, PasswordHash NVARCHAR(256) NOT NULL, Email NVARCHAR(100) NOT NULL UNIQUE
);

-- UserProfiles Table (1-to-1 relationship with Users)
CREATE TABLE UserProfiles (
    Id INT PRIMARY KEY, CreatedOn DATETIME2 NOT NULL DEFAULT GETUTCDATE(), CreatedBy INT NULL, UpdatedOn DATETIME2 NULL, UpdatedBy INT NULL, IsActive BIT NOT NULL DEFAULT 1, IsDeleted BIT NOT NULL DEFAULT 0,
    FirstName NVARCHAR(50) NULL, LastName NVARCHAR(50) NULL, PhoneNumber NVARCHAR(20) NULL, Address NVARCHAR(500) NULL,
    CONSTRAINT FK_UserProfiles_Users FOREIGN KEY (Id) REFERENCES Users(Id) ON DELETE CASCADE
);

-- Categories Table
CREATE TABLE Categories (
    Id INT PRIMARY KEY IDENTITY(1,1), CreatedOn DATETIME2 NOT NULL DEFAULT GETUTCDATE(), CreatedBy INT NULL, UpdatedOn DATETIME2 NULL, UpdatedBy INT NULL, IsActive BIT NOT NULL DEFAULT 1, IsDeleted BIT NOT NULL DEFAULT 0,
    Name NVARCHAR(100) NOT NULL, Description NVARCHAR(500) NULL
);

-- Products Table (N-to-1 relationship with Categories)
CREATE TABLE Products (
    Id INT PRIMARY KEY IDENTITY(1,1), CreatedOn DATETIME2 NOT NULL DEFAULT GETUTCDATE(), CreatedBy INT NULL, UpdatedOn DATETIME2 NULL, UpdatedBy INT NULL, IsActive BIT NOT NULL DEFAULT 1, IsDeleted BIT NOT NULL DEFAULT 0,
    Name NVARCHAR(200) NOT NULL, Description NVARCHAR(MAX) NULL, Price DECIMAL(18, 2) NOT NULL, StockQuantity INT NOT NULL, CategoryId INT NOT NULL,
    CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryId) REFERENCES Categories(Id)
);

-- Orders Table (N-to-1 relationship with Users)
CREATE TABLE Orders (
    Id INT PRIMARY KEY IDENTITY(1,1), CreatedOn DATETIME2 NOT NULL DEFAULT GETUTCDATE(), CreatedBy INT NULL, UpdatedOn DATETIME2 NULL, UpdatedBy INT NULL, IsActive BIT NOT NULL DEFAULT 1, IsDeleted BIT NOT NULL DEFAULT 0,
    OrderDate DATETIME2 NOT NULL DEFAULT GETUTCDATE(), TotalAmount DECIMAL(18, 2) NOT NULL, Status NVARCHAR(50) NOT NULL, UserId INT NOT NULL,
    CONSTRAINT FK_Orders_Users FOREIGN KEY (UserId) REFERENCES Users(Id)
);

-- OrderProducts Junction Table (for N-to-M relationship between Orders and Products)
CREATE TABLE OrderProducts (
    OrderId INT, ProductId INT, Quantity INT NOT NULL, UnitPrice DECIMAL(18, 2) NOT NULL,
    CONSTRAINT PK_OrderProducts PRIMARY KEY (OrderId, ProductId),
    CONSTRAINT FK_OrderProducts_Orders FOREIGN KEY (OrderId) REFERENCES Orders(Id) ON DELETE CASCADE,
    CONSTRAINT FK_OrderProducts_Products FOREIGN KEY (ProductId) REFERENCES Products(Id)
);
GO
PRINT '--> All tables created successfully.';
PRINT '------------------------------------------------';


-- == STEP 3: GENERATE LARGE SCALE MOCK DATA ==
PRINT 'STEP 3: Inserting large scale mock data into tables...';
GO

-- Create 100 users and their profiles
PRINT '--> Generating 100 users and profiles...';
DECLARE @userCounter INT = 1;
WHILE @userCounter <= 100
BEGIN
    DECLARE @username NVARCHAR(50) = 'user' + CAST(@userCounter AS NVARCHAR(10));
    DECLARE @email NVARCHAR(100) = @username + '@example.com';
    DECLARE @newUserId INT;

    INSERT INTO Users (Username, PasswordHash, Email) VALUES (@username, 'some_generic_hash_value', @email);
    SET @newUserId = SCOPE_IDENTITY(); -- Get the ID of the last inserted user

    INSERT INTO UserProfiles (Id, FirstName, LastName, PhoneNumber, Address)
    VALUES (@newUserId, 'FirstName' + CAST(@userCounter AS NVARCHAR(10)), 'LastName' + CAST(@userCounter AS NVARCHAR(10)), 
            '555-' + CAST(100 + @userCounter AS NVARCHAR(10)) + '-0000', 
            CAST(@userCounter AS NVARCHAR(10)) + ' Mockingbird Lane, Mockville');

    SET @userCounter = @userCounter + 1;
END
PRINT '--> 100 users and profiles inserted.';

-- Insert Categories
INSERT INTO Categories (Name, Description) VALUES
('Electronics', 'Consumer electronics and accessories'),
('Books', 'Printed books, e-books, and audiobooks'),
('Apparel', 'Men''s, women''s, and children''s clothing'),
('Home & Garden', 'Home decor, furniture, and garden supplies');
PRINT '--> 4 categories inserted.';

-- Create 200 products
PRINT '--> Generating 200 products...';
DECLARE @productCounter INT = 1;
WHILE @productCounter <= 200
BEGIN
    DECLARE @price DECIMAL(18, 2) = CAST(RAND() * (5000 - 50) + 50 AS DECIMAL(18, 2));
    DECLARE @stock INT = CAST(RAND() * 990 + 10 AS INT);
    DECLARE @categoryId INT = CAST(RAND() * 4 + 1 AS INT); -- Random category ID between 1-4
    
    INSERT INTO Products (Name, Description, Price, StockQuantity, CategoryId)
    VALUES ('Product ' + CAST(@productCounter AS NVARCHAR(10)), 'This is the description for product ' + CAST(@productCounter AS NVARCHAR(10)) + '.', @price, @stock, @categoryId);

    SET @productCounter = @productCounter + 1;
END
PRINT '--> 200 products inserted.';

-- Create 150 orders
PRINT '--> Generating 150 orders...';
DECLARE @orderCounter INT = 1;
DECLARE @statusList TABLE (Id INT, Name NVARCHAR(50));
INSERT INTO @statusList VALUES (1, 'Pending'), (2, 'Shipped'), (3, 'Delivered');

WHILE @orderCounter <= 150
BEGIN
    DECLARE @userId INT = CAST(RAND() * 100 + 1 AS INT); -- Random user ID between 1-100
    DECLARE @orderDate DATETIME2 = DATEADD(day, -CAST(RAND() * 365 AS INT), GETUTCDATE());
    DECLARE @statusId INT = CAST(RAND() * 3 + 1 AS INT);
    DECLARE @statusName NVARCHAR(50);
    SELECT @statusName = Name FROM @statusList WHERE Id = @statusId;

    INSERT INTO Orders (OrderDate, TotalAmount, Status, UserId)
    VALUES (@orderDate, 0, @statusName, @userId); -- TotalAmount is initially 0

    SET @orderCounter = @orderCounter + 1;
END
PRINT '--> 150 orders inserted.';

-- Add random products to each order
PRINT '--> Adding random products to orders (populating OrderProducts)...';
DECLARE @currentOrderId INT = 1;
DECLARE @totalOrderProducts INT = 0;
WHILE @currentOrderId <= 150 -- Total number of orders
BEGIN
    DECLARE @productsPerOrder INT = CAST(RAND() * 5 + 1 AS INT); -- Add 1 to 5 products per order
    DECLARE @productsInOrderCounter INT = 1;

    WHILE @productsInOrderCounter <= @productsPerOrder
    BEGIN
        DECLARE @productId INT = CAST(RAND() * 200 + 1 AS INT); -- Random product ID between 1-200
        DECLARE @quantity INT = CAST(RAND() * 5 + 1 AS INT);
        DECLARE @unitPrice DECIMAL(18, 2);

        -- Check to prevent duplicate products in the same order
        IF NOT EXISTS (SELECT 1 FROM OrderProducts WHERE OrderId = @currentOrderId AND ProductId = @productId)
        BEGIN
            SELECT @unitPrice = Price FROM Products WHERE Id = @productId; -- Get the current price of the product

            INSERT INTO OrderProducts (OrderId, ProductId, Quantity, UnitPrice)
            VALUES (@currentOrderId, @productId, @quantity, @unitPrice);
            
            SET @totalOrderProducts = @totalOrderProducts + 1;
        END

        SET @productsInOrderCounter = @productsInOrderCounter + 1;
    END
    SET @currentOrderId = @currentOrderId + 1;
END
PRINT '--> ' + CAST(@totalOrderProducts AS NVARCHAR(10)) + ' order line items inserted into OrderProducts.';

-- Update the total amount for each order
PRINT '--> Updating total amounts for all orders...';
UPDATE o
SET o.TotalAmount = ISNULL(op_sum.Total, 0)
FROM Orders o
LEFT JOIN (
    SELECT OrderId, SUM(Quantity * UnitPrice) AS Total
    FROM OrderProducts
    GROUP BY OrderId
) AS op_sum ON o.Id = op_sum.OrderId;
PRINT '--> Order totals have been updated.';
GO

PRINT '------------------------------------------------';
PRINT 'DATABASE SETUP AND DATA SEEDING COMPLETED SUCCESSFULLY!';
GO

SET NOCOUNT OFF;

-- A few queries to verify the result
-- SELECT COUNT(*) FROM Users;
-- SELECT COUNT(*) FROM Products;
-- SELECT COUNT(*) FROM Orders;
-- SELECT COUNT(*) FROM OrderProducts;
-- SELECT TOP 10 * FROM Orders ORDER BY Id DESC;
-- SELECT * FROM OrderProducts WHERE OrderId = 150;